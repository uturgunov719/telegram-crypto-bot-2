import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import pytz
import openai
import matplotlib.pyplot as plt
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TZ_MOSCOW = pytz.timezone("Europe/Moscow")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=TZ_MOSCOW)
openai.api_key = OPENAI_API_KEY

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ú–ï–ù–Æ"
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="\ud83d\udcc2 \u041c\u0415\u041d\u042e")],
    ],
    resize_keyboard=True,
    input_field_placeholder="\u041d\u0430\u0436\u043c\u0438 \u041c\u0415\u041d\u042e \ud83d\udc47"
)

# –ü–æ–¥–º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏: –ê–Ω–∞–ª–∏–∑, –ü–æ—Ä—Ç—Ñ–µ–ª—å, –ì—Ä–∞—Ñ–∏–∫
submenu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="\ud83d\udcca \u0410\u043d\u0430\u043b\u0438\u0437")],
        [KeyboardButton(text="\ud83d\udcbc \u041f\u043e\u0440\u0442\u0444\u0435\u043b\u044c")],
        [KeyboardButton(text="\ud83d\udcc8 \u0413\u0440\u0430\u0444\u0438\u043a")],
        [KeyboardButton(text="\ud83d\udd19 \u041d\u0430\u0437\u0430\u0434")],
    ],
    resize_keyboard=True,
    input_field_placeholder="\u0412\u044b\u0431\u0435\u0440\u0438 \u0440\u0430\u0437\u0434\u0435\u043b \ud83d\udc47"
)

# /start
@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442! \u042f \u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0440\u0438\u043f\u0442\u044b.\n\n\u041d\u0430\u0436\u043c\u0438 \u043a\u043d\u043e\u043f\u043a\u0443 \u041c\u0415\u041d\u042e \u043d\u0438\u0436\u0435 \ud83d\udc47",
        reply_markup=main_menu
    )

# –ù–∞–∂–∞–ª "–ú–ï–ù–Æ"
@dp.message(lambda msg: msg.text == "\ud83d\udcc2 \u041c\u0415\u041d\u042e")
async def open_submenu(message: types.Message):
    await message.answer("\ud83d\udcc2 \u0412\u044b\u0431\u0435\u0440\u0438 \u0440\u0430\u0437\u0434\u0435\u043b:", reply_markup=submenu)

# –ù–∞–∑–∞–¥
@dp.message(lambda msg: msg.text == "\ud83d\udd19 \u041d\u0430\u0437\u0430\u0434")
async def go_back(message: types.Message):
    await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# –ê–Ω–∞–ª–∏–∑ —Å —Ç–æ–ø-10 –º–æ–Ω–µ—Ç–∞–º–∏
@dp.message(lambda msg: msg.text == "\ud83d\udcca \u0410\u043d\u0430\u043b\u0438\u0437")
async def analysis_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="BTC", callback_data="analyze_BTC"), InlineKeyboardButton(text="ETH", callback_data="analyze_ETH")],
            [InlineKeyboardButton(text="BNB", callback_data="analyze_BNB"), InlineKeyboardButton(text="ADA", callback_data="analyze_ADA")],
            [InlineKeyboardButton(text="SOL", callback_data="analyze_SOL"), InlineKeyboardButton(text="AVAX", callback_data="analyze_AVAX")],
            [InlineKeyboardButton(text="LINK", callback_data="analyze_LINK"), InlineKeyboardButton(text="MATIC", callback_data="analyze_MATIC")],
            [InlineKeyboardButton(text="ARB", callback_data="analyze_ARB"), InlineKeyboardButton(text="XRP", callback_data="analyze_XRP")]
        ]
    )
    await message.answer("üí° –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –≤ GPT
@dp.callback_query(lambda c: c.data.startswith("analyze_"))
async def handle_coin_analysis(callback: types.CallbackQuery):
    coin = callback.data.split("_")[1]
    await callback.answer()
    await callback.message.answer(f"üß† –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ <b>{coin}</b>...", parse_mode=ParseMode.HTML)

    prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ç—Ä–µ–π–¥–µ—Ä. –î–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ {coin}/USDT. –£–∫–∞–∂–∏ —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, —Ç—Ä–µ–Ω–¥, RSI, —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏ —Å–∫–∞–∂–∏, –ª–æ–Ω–≥ –∏–ª–∏ —à–æ—Ä—Ç. –ö—Ä–∞—Ç–∫–æ, –∫–∞–∫ –ø—Ä–æ—Ñ–∏."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}"

    await callback.message.answer(reply)

# –ü–æ—Ä—Ç—Ñ–µ–ª—å
@dp.message(lambda msg: msg.text == "\ud83d\udcbc \u041f\u043e\u0440\u0442\u0444\u0435\u043b\u044c")
async def portfolio(message: types.Message):
    await message.answer("üíº –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å. –í –±—É–¥—É—â–µ–º —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤.")

# –ì—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
@dp.message(lambda msg: msg.text == "\ud83d\udcc8 \u0413\u0440\u0430\u0444\u0438\u043a")
async def chart(message: types.Message):
    prices = [28000, 28200, 28100, 28500, 28900, 29100, 28800, 29200, 29400, 29500]
    timestamps = list(range(len(prices)))
    plt.figure(figsize=(8, 4))
    plt.plot(timestamps, prices, marker='o')
    plt.title("BTC/USDT: –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¶–µ–Ω–∞, $")
    plt.grid(True)
    plt.tight_layout()
    filepath = "btc_chart.png"
    plt.savefig(filepath)
    plt.close()

    photo = FSInputFile(filepath)
    await message.answer_photo(photo=photo, caption="üìà –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ BTC. –ü—Ä–æ–≥–Ω–æ–∑: –≤–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤—ã—à–µ $29,500")
    os.remove(filepath)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
async def send_daily_analysis():
    now = datetime.now(TZ_MOSCOW).strftime("%Y-%m-%d %H:%M")
    prompt = "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä –ø–æ 3 —Ç–æ–ø-–∞–ª—å—Ç–∫–æ–∏–Ω–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –£–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        text = response.choices[0].message.content
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}"
    await bot.send_message(chat_id=CHAT_ID, text=f"üïî {now} –ú–°–ö\n\n{text}")

# –ó–∞–ø—É—Å–∫
async def main():
    scheduler.add_job(send_daily_analysis, CronTrigger(hour=17, minute=0))
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
